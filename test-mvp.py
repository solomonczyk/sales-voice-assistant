#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MVP Sales Voice Assistant
"""

import asyncio
import aiohttp
import json
import time
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES = {
    "telephony-gateway": "http://localhost:3000",
    "asr-service": "http://localhost:8001", 
    "tts-service": "http://localhost:8002",
    "dialog-orchestrator": "http://localhost:8003",
    "crm-connector": "http://localhost:8005"
}

async def check_service_health(session: aiohttp.ClientSession, service_name: str, url: str) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        async with session.get(f"{url}/health", timeout=5) as response:
            if response.status == 200:
                data = await response.json()
                return {
                    "service": service_name,
                    "status": "healthy",
                    "url": url,
                    "data": data
                }
            else:
                return {
                    "service": service_name,
                    "status": "unhealthy",
                    "url": url,
                    "error": f"HTTP {response.status}"
                }
    except Exception as e:
        return {
            "service": service_name,
            "status": "unreachable",
            "url": url,
            "error": str(e)
        }

async def test_asr_service(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """–¢–µ—Å—Ç ASR —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        test_audio = b"fake_audio_data_for_testing"
        
        data = aiohttp.FormData()
        data.add_field('audio', test_audio, filename='test.wav', content_type='audio/wav')
        data.add_field('language', 'ru-RU')
        
        async with session.post(f"{SERVICES['asr-service']}/recognize", data=data, timeout=10) as response:
            if response.status == 200:
                result = await response.json()
                return {"status": "success", "result": result}
            else:
                return {"status": "error", "error": f"HTTP {response.status}"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def test_tts_service(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """–¢–µ—Å—Ç TTS —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏.",
            "voice": "alena",
            "format": "wav"
        }
        
        async with session.post(f"{SERVICES['tts-service']}/synthesize", json=payload, timeout=10) as response:
            if response.status == 200:
                result = await response.json()
                return {"status": "success", "result": result}
            else:
                return {"status": "error", "error": f"HTTP {response.status}"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def test_dialog_orchestrator(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """–¢–µ—Å—Ç Dialog Orchestrator"""
    try:
        payload = {
            "session_id": "test-session-123",
            "user_message": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"
        }
        
        async with session.post(f"{SERVICES['dialog-orchestrator']}/dialog", json=payload, timeout=10) as response:
            if response.status == 200:
                result = await response.json()
                return {"status": "success", "result": result}
            else:
                return {"status": "error", "error": f"HTTP {response.status}"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def test_crm_connector(session: aiohttp.ClientSession) -> Dict[str, Any]:
    """–¢–µ—Å—Ç CRM Connector"""
    try:
        payload = {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥",
            "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            "phone": "+7 (999) 123-45-67",
            "source": "phone_call",
            "product_interest": "premium_package"
        }
        
        async with session.post(f"{SERVICES['crm-connector']}/leads", json=payload, timeout=10) as response:
            if response.status == 200:
                result = await response.json()
                return {"status": "success", "result": result}
            else:
                return {"status": "error", "error": f"HTTP {response.status}"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MVP Sales Voice Assistant")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
        health_results = []
        
        for service_name, url in SERVICES.items():
            result = await check_service_health(session, service_name, url)
            health_results.append(result)
            
            status_icon = "‚úÖ" if result["status"] == "healthy" else "‚ùå"
            print(f"  {status_icon} {service_name}: {result['status']}")
            if result["status"] != "healthy":
                print(f"     –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        
        # ASR —Ç–µ—Å—Ç
        print("  üé§ –¢–µ—Å—Ç ASR Service...")
        asr_result = await test_asr_service(session)
        if asr_result["status"] == "success":
            print(f"     ‚úÖ ASR: {asr_result['result']['text']}")
        else:
            print(f"     ‚ùå ASR: {asr_result['error']}")
        
        # TTS —Ç–µ—Å—Ç
        print("  üîä –¢–µ—Å—Ç TTS Service...")
        tts_result = await test_tts_service(session)
        if tts_result["status"] == "success":
            print(f"     ‚úÖ TTS: –∞—É–¥–∏–æ {tts_result['result']['duration']:.2f}—Å")
        else:
            print(f"     ‚ùå TTS: {tts_result['error']}")
        
        # Dialog —Ç–µ—Å—Ç
        print("  ü§ñ –¢–µ—Å—Ç Dialog Orchestrator...")
        dialog_result = await test_dialog_orchestrator(session)
        if dialog_result["status"] == "success":
            print(f"     ‚úÖ Dialog: {dialog_result['result']['assistant_message']}")
        else:
            print(f"     ‚ùå Dialog: {dialog_result['error']}")
        
        # CRM —Ç–µ—Å—Ç
        print("  üìä –¢–µ—Å—Ç CRM Connector...")
        crm_result = await test_crm_connector(session)
        if crm_result["status"] == "success":
            print(f"     ‚úÖ CRM: –ª–∏–¥ —Å–æ–∑–¥–∞–Ω (ID: {crm_result['result']['id']})")
        else:
            print(f"     ‚ùå CRM: {crm_result['error']}")
        
        # 3. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n3Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        healthy_services = sum(1 for r in health_results if r["status"] == "healthy")
        total_services = len(health_results)
        
        functional_tests = [asr_result, tts_result, dialog_result, crm_result]
        successful_tests = sum(1 for r in functional_tests if r["status"] == "success")
        total_tests = len(functional_tests)
        
        print(f"  üìä –°–µ—Ä–≤–∏—Å—ã: {healthy_services}/{total_services} —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"  üß™ –¢–µ—Å—Ç—ã: {successful_tests}/{total_tests} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if healthy_services == total_services and successful_tests == total_tests:
            print("\nüéâ MVP –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
        elif healthy_services == total_services:
            print("\n‚ö†Ô∏è  –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏")
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
        for service_name, url in SERVICES.items():
            print(f"  {service_name}: {url}")

if __name__ == "__main__":
    asyncio.run(main())
